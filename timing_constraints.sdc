# Synopsys Design Constraints (SDC) Template for Keystone SoC on PolarFire
#
# This is a template file. Constraints must be reviewed and customized based on:
# 1. The specific PolarFire evaluation board being used (e.g., Icicle Kit revision).
# 2. The actual clock frequencies generated by the on-chip PF_CCC IP.
# 3. The timing characteristics of external components connected to the FPGA (e.g., for I/O delays).
# 4. Specific critical paths identified during design and synthesis.

# --- Primary Clock Definition ---
# Define the main input clock from the FPGA board's oscillator.
# Example: Assuming a 100MHz clock input (10ns period) on a pin named 'fpga_clk_in_pin'.
# Replace 'fpga_clk_in_pin' with the actual top-level port name for the clock input.
# create_clock -name {fpga_clk_in} -period 10.0 [get_ports {fpga_clk_in_pin}]

# Example for a specific board pin if known, otherwise use top-level port name
# create_clock -name {fpga_clk_in} -period 10.0 [get_ports {CLK_IN}] ;# Example port name

# --- Generated Clocks ---
# Clocks generated by the PolarFire Clock Conditioning Circuitry (PF_CCC) IP
# will typically be defined automatically by Libero SoC when the IP is configured
# or via a separate SDC file generated by the IP.
# If manual definition is needed, it would look something like this:
#
# Example: Clock for the CPU core generated by PF_CCC
# create_generated_clock -name {cpu_clk} \
#                        -source [get_pins {u_pf_ccc_instance/GL0_FAB_CLK}] \
#                        -divide_by 1 [get_pins {u_cva6_core/clk}] ;# Example instance path
#
# Example: Clock for the AXI interconnect
# create_generated_clock -name {axi_interconnect_clk} \
#                        -source [get_pins {u_pf_ccc_instance/GL1_FAB_CLK}] \
#                        [get_pins {u_axi_interconnect/clk}]
#
# Example: Clock for DDR Controller (AXI interface clock)
# create_generated_clock -name {ddr_axi_clk} \
#                        -source [get_pins {u_pf_ccc_instance/GL2_FAB_CLK}] \
#                        [get_pins {u_ddr_controller_wrapper/s_axi_aclk}]

# --- Clock Uncertainty ---
# Define clock jitter and other uncertainties.
# Example: 0.25ns setup uncertainty for the input clock.
# set_clock_uncertainty -setup 0.25 [get_clocks {fpga_clk_in}]
# set_clock_uncertainty -hold 0.15 [get_clocks {fpga_clk_in}]
# Uncertainty for generated clocks might also be specified or derived.

# --- Input Delays ---
# Specify delays for input signals relative to a clock.
# These values depend on board trace delays and external device output characteristics.
#
# Example for UART RX (assuming data is valid 2ns after clock edge max, and 0.5ns before min for hold)
# Ensure the clock referenced is the one capturing the input register.
# set_input_delay -clock {fpga_clk_in} -max 2.0 [get_ports {uart_rx_i}]
# set_input_delay -clock {fpga_clk_in} -min 0.5 [get_ports {uart_rx_i}]

# --- Output Delays ---
# Specify delays for output signals relative to a clock.
# These values depend on board trace delays and external device input setup/hold requirements.
#
# Example for UART TX (assuming external device needs data 2ns before clock edge max, and data held 0.5ns after for hold)
# Ensure the clock referenced is the one launching the output register.
# set_output_delay -clock {fpga_clk_in} -max 2.0 [get_ports {uart_tx_o}]
# set_output_delay -clock {fpga_clk_in} -min -0.5 [get_ports {uart_tx_o}] ;# Negative hold means data must be stable before edge

# --- False Paths ---
# Identify paths that should not be considered for timing analysis.
#
# Example: Asynchronous reset signal (if properly synchronized internally).
# Replace 'resetn_pin' with the actual top-level port name for the reset input.
# set_false_path -from [get_ports {resetn_pin}]
#
# Example: Paths through Clock Domain Crossing (CDC) synchronizer flip-flops.
# This tells the tool not to analyze timing from the source flop to the first synchronizer flop
# if the synchronizer is correctly designed.
# set_false_path -through [get_pins -hierarchical *cdc_sync_reg_src*/D]
# set_false_path -through [get_pins -hierarchical *cdc_sync_reg_dst_0*/D]
# More specific CDC constraints are generally preferred (e.g. set_max_delay -datapath_only).
#
# Example: Paths between completely unrelated or very slow clock domains if any.
# set_false_path -from [get_clocks {clk_A}] -to [get_clocks {clk_B}]
# set_false_path -from [get_clocks {clk_B}] -to [get_clocks {clk_A}]

# --- Multicycle Paths ---
# If certain paths are known to take multiple clock cycles by design.
# Example: A control signal that is asserted for N cycles.
# set_multicycle_path -setup -end -from [get_pins {source_reg/Q}] -to [get_pins {dest_reg/D}] N
# set_multicycle_path -hold  -end -from [get_pins {source_reg/Q}] -to [get_pins {dest_reg/D}] N-1

# --- Max Delay / Min Delay ---
# For specific critical paths if needed, though usually covered by clock constraints.
# set_max_delay 5.0 -from [get_pins {start_reg/C}] -to [get_pins {end_reg/D}]
# set_min_delay 0.5 -from [get_pins {start_reg/C}] -to [get_pins {end_reg/D}]

# --- End of SDC Template ---
# Add further specific constraints based on design analysis and IP requirements.
