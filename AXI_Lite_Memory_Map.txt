== AXI4-Lite Slave Interface Memory Map for Keystone Coprocessor Control ==

Base Address: 0x0000_0000 (Offset from the base address assigned to the coprocessor in the system memory map)
AXI Data Width: 32 bits

All registers are Read/Write (RW) unless specified otherwise.
R = Read, W = Write, RC = Read Clear (reading clears the bits), SC = Self Clear (hardware clears bits after action)

Offset      | Register Name                | Bits      | Description
------------|------------------------------|-----------|----------------------------------------------------------------------------------------------------
**Global Control and Status Registers**
0x00        | COPRO_CMD_REG                |           | Coprocessor Command Register
            |                              | [0]       | `START_VM`: (SC) Start selected VM (selected by VM_SELECT_REG).
            |                              | [1]       | `STOP_VM`: (SC) Stop/Halt selected VM.
            |                              | [2]       | `RESET_VM`: (SC) Reset selected VM.
            |                              | [3]       | `LOAD_PROG`: (SC) Initiate program load for selected VM. CCU uses PROG_ADDR_LOW/HIGH_REG.
            |                              | [4]       | `LOAD_DATA_IN`: (SC) Initiate input data transfer for selected VM. CCU uses DATA_IN_ADDR_LOW/HIGH_REG.
            |                              | [7:5]     | Reserved
            |                              | [31:8]    | Command Data (Optional, e.g., specific flags for a command)
0x04        | VM_SELECT_REG                |           | VM Select Register
            |                              | [2:0]     | `VM_ID`: Selects one of the 8 eBPF VM Slots (0-7) for subsequent commands.
            |                              | [31:3]    | Reserved
0x08        | COPRO_STATUS_REG             | (R)       | Coprocessor Global Status Register
            |                              | [0]       | `BUSY`: Overall coprocessor busy (e.g., DMA active, or any VM busy).
            |                              | [7:1]     | Reserved
            |                              | [15:8]    | `ACTIVE_VM_MASK`: (R) Bitmask indicating which VMs are currently active/running.
            |                              | [31:16]   | Reserved
0x0C        | PROG_ADDR_LOW_REG            |           | Program Base Address Low (for DMA)
            |                              | [31:0]    | Lower 32 bits of the source address in main memory for eBPF program.
0x10        | PROG_ADDR_HIGH_REG           |           | Program Base Address High (for DMA) - for 64-bit addressing if needed
            |                              | [31:0]    | Upper 32 bits of the source address (if system uses >32 bit addresses).
0x14        | DATA_IN_ADDR_LOW_REG         |           | Input Data Base Address Low (for DMA)
            |                              | [31:0]    | Lower 32 bits of the source address in main memory for input data.
0x18        | DATA_IN_ADDR_HIGH_REG        |           | Input Data Base Address High (for DMA)
            |                              | [31:0]    | Upper 32 bits of the source address.
0x1C        | DATA_OUT_ADDR_LOW_REG        |           | Output Data Base Address Low (for DMA)
            |                              | [31:0]    | Lower 32 bits of the destination address in main memory for output data.
0x20        | DATA_OUT_ADDR_HIGH_REG       |           | Output Data Base Address High (for DMA)
            |                              | [31:0]    | Upper 32 bits of the destination address.
0x24        | DATA_LEN_REG                 |           | Data Length Register (for DMA transfers - program, data in/out)
            |                              | [31:0]    | Length in bytes for the current DMA operation (program or data).

**Interrupt Control Registers**
0x28        | INT_STATUS_REG               | (R/RC)    | Interrupt Status Register
            |                              | [0]       | `VM0_DONE_IRQ`: VM 0 completed execution.
            |                              | [1]       | `VM1_DONE_IRQ`: VM 1 completed execution.
            |                              | ...       | ...
            |                              | [7]       | `VM7_DONE_IRQ`: VM 7 completed execution.
            |                              | [8]       | `VM0_ERROR_IRQ`: VM 0 encountered an error.
            |                              | ...       | ...
            |                              | [15]      | `VM7_ERROR_IRQ`: VM 7 encountered an error.
            |                              | [16]      | `DMA_DONE_IRQ`: DMA transfer completed.
            |                              | [17]      | `DMA_ERROR_IRQ`: DMA transfer error.
            |                              | [31:18]   | Reserved
0x2C        | INT_ENABLE_REG               |           | Interrupt Enable Register
            |                              | [0]       | `VM0_DONE_EN`: Enable interrupt for VM 0 completion.
            |                              | [1]       | `VM1_DONE_EN`: Enable interrupt for VM 1 completion.
            |                              | ...       | ...
            |                              | [7]       | `VM7_DONE_EN`: Enable interrupt for VM 7 completion.
            |                              | [8]       | `VM0_ERROR_EN`: Enable interrupt for VM 0 error.
            |                              | ...       | ...
            |                              | [15]      | `VM7_ERROR_EN`: Enable interrupt for VM 7 error.
            |                              | [16]      | `DMA_DONE_EN`: Enable interrupt for DMA completion.
            |                              | [17]      | `DMA_ERROR_EN`: Enable interrupt for DMA error.
            |                              | [31:18]   | Reserved

**Per-VM Status Registers (Optional - could be part of a larger status block read via VM_SELECT_REG)**
*Access to these might be indirect: first write VM_ID to VM_SELECT_REG, then read/write these.*
*Alternatively, map a block of 8xN registers for direct access if address space allows.*
*For this initial map, we assume VM_SELECT_REG is used to query specific VM status.*

0x30        | SELECTED_VM_STATUS_REG       | (R)       | Status of the VM selected by VM_SELECT_REG
            |                              | [0]       | `READY`: VM is ready for new program/data.
            |                              | [1]       | `RUNNING`: VM is currently executing.
            |                              | [2]       | `DONE`: VM execution finished.
            |                              | [3]       | `ERROR`: VM is in an error state.
            |                              | [7:4]     | `ERROR_CODE`: Specific error code if ERROR is set.
            |                              | [31:8]    | Reserved
0x34        | SELECTED_VM_PC_REG           | (R)       | Program Counter of the selected VM (for debugging)
            |                              | [31:0]    | Current PC value.
0x38        | SELECTED_VM_DATA_OUT_ADDR_REG | (R)       | Address where selected VM wrote its output data (if applicable, relative to a VM-specific area or absolute if DMA'd by VM itself)
            |                              | [31:0]    | Output data address.

**Data Mailbox Registers (Example - if direct CPU data passing is needed, typically for small amounts of data)**
*These are typically per-VM or a shared mailbox selected by VM_SELECT_REG.*
*Assuming a single shared mailbox for simplicity here, selected by VM_SELECT_REG before access.*

0x80        | MAILBOX_DATA_IN_0_REG        |           | Mailbox for CPU to write data to selected VM (Word 0)
            |                              | [31:0]    | Data Word 0
0x84        | MAILBOX_DATA_IN_1_REG        |           | Mailbox for CPU to write data to selected VM (Word 1)
            |                              | [31:0]    | Data Word 1
...         | ...                          | ...       | ... (e.g., up to 4-8 words)
0x9C        | MAILBOX_DATA_IN_N_REG        |           | (Example last input word)

0xA0        | MAILBOX_DATA_OUT_0_REG       | (R)       | Mailbox for CPU to read data from selected VM (Word 0)
            |                              | [31:0]    | Data Word 0
0xA4        | MAILBOX_DATA_OUT_1_REG       | (R)       | Mailbox for CPU to read data from selected VM (Word 1)
            |                              | [31:0]    | Data Word 1
...         | ...                          | ...       | ... (e.g., up to 4-8 words)
0xBC        | MAILBOX_DATA_OUT_N_REG       | (R)       | (Example last output word)

0xFC        | COPRO_VERSION_REG            | (R)       | Coprocessor Version Register
            |                              | [7:0]     | Patch Version
            |                              | [15:8]    | Minor Version
            |                              | [23:16]   | Major Version
            |                              | [31:24]   | Reserved

**Notes:**
1.  This is a preliminary memory map. Addresses and register functions may change as the design evolves.
2.  DMA operations (LOAD_PROG, LOAD_DATA_IN, and implicit DATA_OUT by VMs) will use the respective Address Low/High and Data Length registers. The CCU will manage the DMA engine based on these.
3.  Interrupts: The `INT_STATUS_REG` reflects the source of interrupts. The CPU should read this register to determine the cause and then clear the corresponding bit(s) (if R/C). `INT_ENABLE_REG` controls which sources can actually generate an interrupt signal to the CPU. The global `interrupt_out` from the coprocessor is an OR of all enabled and active interrupts.
4.  Accessing per-VM status (0x30-0x38): The typical flow would be:
    a.  Write to `VM_SELECT_REG` to choose VM_ID.
    b.  Read `SELECTED_VM_STATUS_REG`, `SELECTED_VM_PC_REG`, etc.
5.  Mailbox registers provide a simple way for the CPU to exchange small amounts of data directly with a VM, bypassing main memory DMA. The CCU would facilitate moving data between these registers and the selected VM's internal data structures.
6.  The exact address range for "Per-VM Status Registers" and "Data Mailbox Registers" might be replicated for each VM if direct addressing is preferred over select-then-access, which would consume more address space (e.g., 0x100 - 0x1FF for VM0 registers, 0x200 - 0x2FF for VM1 registers, etc.). The current map assumes a more compact, select-then-access model for these.
7.  `s_axi_aresetn` is active low. Registers should be reset to defined default values. For example, enable registers might reset to 0, status registers to a "ready" or "idle" state.
8.  `COPRO_CMD_REG` commands are self-clearing (SC) where appropriate, meaning the hardware will clear the command bit after it has been accepted/actioned by the CCU. This prevents the command from being accidentally re-triggered on a subsequent register write if the CPU doesn't explicitly clear it.
